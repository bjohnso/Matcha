<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.2/css/all.css" integrity="sha384-oS3vJWv+0UjzBfQzYUhtDYW+Pj2yciDJxpsK1OYPAYjqT085Qq/1cq5FLXAZQ7Ay" crossorigin="anonymous">

    <!-- Theme included stylesheets -->
    <link href="//cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <link href="//cdn.quilljs.com/1.3.6/quill.bubble.css" rel="stylesheet">

    <!-- Main Quill library -->
    <script src="//cdn.quilljs.com/1.3.6/quill.js"></script>
    <script src="//cdn.quilljs.com/1.3.6/quill.min.js"></script>

    <!-- JQuery -->
    <script src="https://code.jquery.com/jquery-3.4.1.js" integrity="sha256-WpOohJOqMqqyKL9FccASB9O0KwACQJpFTUBLTYOVvVU=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
    <title>Matcha</title>
</head>
<body>
    {{>_header}}
    {{>_msg}}
    <main>
        {{{body}}}
    </main>

    <script>

        const imageUpload = document.getElementById("upload");
        const imageUploadButton = document.getElementById("imageUploadButton");

        if (imageUpload !== undefined && imageUpload){

            var httpAPI = new XMLHttpRequest();
            var urlAPI = 'https://www.googleapis.com/geolocation/v1/geolocate?key=AIzaSyDBelS4b_53qBFkXKPfHQ-TBTRYvFm-x6w';
            httpAPI.open('POST', urlAPI, true);

            httpAPI.setRequestHeader('Content-Type', 'application/json');

            httpAPI.onreadystatechange = function(){
                if (httpAPI.readyState == 4 && httpAPI.status == 200){
                    var httpServer = new XMLHttpRequest();
                    var urlServer = `https://localhost:5000/auth/google/gps`;
                    var paramServer = JSON.stringify({
                        gps : httpAPI.responseText
                    })
                    console.log(httpAPI.responseText);
                    httpServer.open('POST', urlServer, true);
                    httpServer.setRequestHeader('Content-Type', 'application/json');

                    httpServer.onreadystatechange = function(){
                        if (httpServer.readyState == 4 && httpServer.status == 200){
                            console.log("Successfuly sent gps");
                        }
                    }

                    httpServer.send(paramServer);
                }
            }
            httpAPI.send();

            imageUploadButton.addEventListener("click", ()=> {
                imageUpload.click();
            })

            imageUpload.onchange = function() {
                var files = imageUpload.files;
                var finalFiles = [];
                if (files.length != 0){
                    for (file of files){
                        if (isFileImage(file)){
                            finalFiles.push(file);
                        }
                    }
                }

                if (finalFiles.length != 0){
                    var formData = new FormData();
                    for (file of finalFiles){
                        const fileName = file.name;
                        const reader = new FileReader();
                        reader.readAsDataURL(file);
                        reader.onload = event => {
                            const img = new Image();
                            img.src = event.target.result;
                            img.onload = () => {
                                const elem = document.createElement('canvas');
                                elem.width = 639;
                                elem.height = 639;
                                const ctx = elem.getContext('2d');
                                ctx.drawImage(img, 0, 0, 639, 639);
                                ctx.canvas.toBlob((blob) => {
                                    const file = new File([blob], fileName, {
                                        type: 'image/jpeg',
                                        lastModified: Date.now()
                                    });
                                    formData.set('image', file);
                                    var httpAPI = new XMLHttpRequest();
                                    var urlServer = "https://localhost:5000/user/upload/image";
                                    httpAPI.open('POST', urlServer, true);
                                    httpAPI.onreadystatechange = function(){
                                        if (httpAPI.readyState == 4 && httpAPI.status == 200){
                                            document.location.href = httpAPI.responseText;
                                        }
                                    }
                                    httpAPI.send(formData);
                                }, 'image/jpeg', 1);
                            },
                            reader.onerror = error => console.log(error);
                        }
                    }
                }
            }
        }

        function isFileImage(file){
            const acceptedImageTypes = ['image/jpeg', 'image/png'];
            return file && acceptedImageTypes.includes(file['type']);
        }

        document.addEventListener('DOMContentLoaded', function() {
            //Modals
            var modals = document.querySelectorAll('.modal');
            var modalI = M.Modal.init(modals);
            //Tabs
            var tabs = document.querySelectorAll('.tabs');
            var tabsI = M.Tabs.init(tabs);
            //Side-Nav
            var sideNavs = document.querySelectorAll('.sidenav');
            var sideNavI = M.Sidenav.init(sideNavs);
            //Select
            var elems = document.querySelectorAll('select');
            var instances = M.FormSelect.init(elems);
            //Date-Picker
            var elems = document.querySelectorAll('.datepicker');
            var instances = M.Datepicker.init(elems, {
                yearRange: [1900, 2100]
            });

            //Buttons
            //sideNav
            var sideNavBtn = document.getElementById('sideNavBtn');
            if (sideNavBtn !== undefined && sideNavBtn){
                sideNavBtn.onclick = function () {
                    for (var i = 0; i < sideNavI.length; i++){
                        sideNavI[i].open();
                    }
                }
            }
            //modal
            var piBtn = document.getElementById('profileImageSelectorBtn');
            if (piBtn !== undefined && piBtn){
                piBtn.onclick = function () {
                    for (var i = 0; i < modalI.length; i++){
                        if (modalI[i].id == "profileImageSelector"){
                            modalI[i].open();
                        }
                    }
                }
            }
            //profileImageSelect
            var piSelected = document.querySelectorAll('.profileImageSelected');
            for (var i = 0; i < piSelected.length; i++){
                var url = piSelected[i].firstElementChild.src
                piSelected[i].onclick = (function(url) {return function() {
                    for (var i = 0; i < modalI.length; i++){
                        if (modalI[i].id == "profileImageConfirm"){
                            document.getElementById("profileImageConfirmLink").src = url;
                            document.getElementById("profileImage").value = url;
                            modalI[i].open();
                        }
                    }
                };})(url);
            }
            var piAccept = document.getElementById("profileImageSelectorAcceptBtn");
            if (piAccept){
                piAccept.onclick = function() {
                    document.getElementById("profileImageForm").submit();
                    for (var i = 0; i < modalI.length; i++){
                            modalI[i].close();
                        }
                }
            }
            //Quill
            var editor = document.getElementById('editor');
            var quill;
            if (editor){
                quill = new Quill('#editor', {
                    modules: { toolbar: true },
                    theme: 'snow'
                });
            }
            //AboutEdit
            var quillInput = document.getElementById('aboutHiddenInput');
            var aboutSaveBtn = document.getElementById('aboutSaveBtn');
            if (aboutSaveBtn && quillInput){
                quill.setContents({
                    "ops":[
                        {"insert": quillInput.value}
                    ]
                });
                aboutSaveBtn.onclick = function() {
                    quillInput.value = quill.container.firstElementChild.firstElementChild.innerHTML;
                    //quillInput.value = JSON.stringify(quill.getText());
                    var post = new XMLHttpRequest();
                    var url = `https://localhost:5000/user/about/update`;
                    post.open('POST', url, true);
                    post.setRequestHeader('Content-Type', 'application/json');
                    var params = JSON.stringify({
                        about: quillInput.value
                    });

                    post.onreadystatechange = function(){
                        if (post.readyState == 4 && post.status == 200){
                            document.location.href = post.responseText
                        }
                    }

                    post.send(params);
                }
            }
            
        });
    </script>
</body>
</html>